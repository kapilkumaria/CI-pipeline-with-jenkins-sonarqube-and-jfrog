pipeline {
    agent any
    environment {
        PATH = "/opt/maven/bin:$WORKSPACE:$PATH"
        
        AWS_REGION = 'us-east-1'
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        
        // SonarQube Environment
        SONAR_HOST_URL = 'http://98.80.110.128:9000'
        SONAR_PROJECT_KEY = 'back-end-project'
        
        // Artifactory details
        ARTIFACTORY_URL = 'http://98.80.110.128:8082/artifactory'
        ARTIFACTORY_REPO = 'maven007'
    }
    stages {
        stage('Checkout Code') {
            steps {
               git url: 'https://github.com/kapilkumaria/CI-pipeline-with-jenkins-sonarqube-and-jfrog.git', branch: 'main'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('SonarQube Analysis') {
         steps {
             withSonarQubeEnv('sonarQube') {
                 //sh 'mvn sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN'
                   sh 'mvn sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONARQUBE_AUTH_TOKEN'
             }
           }
        }
        stage('Retrieve AWS Secret') {
            steps {
                script {
                    // Fetch secret from AWS Secrets Manager
                    def secret = sh(
                        script: "aws secretsmanager get-secret-value --secret-id my-jfrog-cred --query SecretString --output text --region us-east-1 | jq -r '.'",
                        returnStdout: true
                    ).trim()
                    
                    // Parse the JSON secret and extract ARTIFACTORY_USER and ARTIFACTORY_PASSWORD
                    def json = readJSON text: secret
                    env.ARTIFACTORY_USER = json.ARTIFACTORY_USER
                    env.ARTIFACTORY_PASSWORD = json.ARTIFACTORY_PASSWORD
                }
            }
        }

        // New stage: Install Trivy
        stage('Install Trivy') {
            steps {
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                export PATH=$PATH:$(pwd)/bin  # Add Trivy installation directory to PATH
                '''
            }
        }

        // New stage: Trivy Scan for JAR file
        stage('Trivy Scan JAR') {
            steps {
                sh '''
                export PATH=$PATH:$(pwd)/bin  # Ensure Trivy is in PATH
                trivy fs --exit-code 1 --severity HIGH,CRITICAL ./target/*.jar
                '''
            }
            post {
                failure {
                    echo 'Security vulnerabilities found in the JAR file!'
                }
            }
        }

        stage('Install JFrog CLI') {
            steps {
                sh '''
                curl -fL https://getcli.jfrog.io | sh
                chmod +x jfrog
                '''
            }
        }
        stage('Upload to Artifactory') {
            steps {
                script {
                    sh """
                        jfrog config rm artifactory-server-kk --quiet || true
                        jfrog config add artifactory-server-kk --artifactory-url=${ARTIFACTORY_URL} --user=${ARTIFACTORY_USER} --password=${ARTIFACTORY_PASSWORD} --interactive=false
                    """
                    // Upload artifact
                    sh '''
                         jfrog rt u target/*.jar $ARTIFACTORY_REPO/$(date +%Y-%m-%d)/ --build-name=my-build --build-number=$BUILD_NUMBER
                    '''
                }
            }
        }
   }
}
